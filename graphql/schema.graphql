"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type User {
    id: ID!
    name: String!
    email: String!
    posts: [Post!]! @hasMany
}

type Post {
    id: ID!
    content: String!
    createdBy: User! @belongsTo(relation: "user")
    createdAt: DateTime @rename(attribute: "created_at")
}

type Query {
    user(id: ID! @eq): User @find @middleware(checks: ["auth:api"])
    users(input: UsersInput @spread): [User!]! @all @middleware(checks: ["auth:api"])
    me: User @auth(guard: "api")
    post(id: ID! @eq): Post @find @middleware(checks: ["auth:api"])
    posts(input: PostsInput @spread): [Post!]! @all @middleware(checks: ["auth:api"])
}

type Mutation {
    createUser(input: CreateUserInput! @spread): User! @create
    login(input: LoginInput! @spread): String @field(resolver: "AuthMutator@login")
    logout(api_token: String!): String @field(resolver: "AuthMutator@logout") @middleware(checks: ["auth:api"])
    createPost(input: CreatePostInput! @spread): Post! @create @middleware(checks: ["auth:api"])
    updatePost(input: UpdatePostInput! @spread): Post! @update @can(ability: "update", find: "id") @middleware(checks: ["auth:api"])
    deletePost(id: ID! @eq): Post! @delete @can(ability: "delete", find:"id") @middleware(checks: ["auth:api"])
}

input UsersInput {
    name: String @where(operator: "like")
    email: String @where(operator: "like")
    orderBy: [OrderByClause!] @orderBy
}

input CreateUserInput {
    name: String! @rules(apply: ["required"])
    email: String! @rules(apply: ["required", "email", "unique:users,email"])
    password: String! @rules(apply: ["required", "min:6"]) @bcrypt
}

input LoginInput {
    email: String!
    password: String!
}

input PostsInput {
    content: String @where(operator: "like")
    orderBy: [OrderByClause!] @orderBy
}

input CreatePostInput {
    content: String! @rules(applu: ["required"])
    userId: ID! @rename(attribute: "user_id") @rules(apply: ["exists:users,id"])
}

input UpdatePostInput {
    id: ID! @eq
    content: String!
}
